# region Test 

public static boolean isAnagram(String str1, String str2) {

  if (str1.length() != str2.length()) {

    return false;

  }

  char[] charArray1 = str1.toCharArray();

  char[] charArray2 = str2.toCharArray();

  Arrays.sort(charArray1);

  Arrays.sort(charArray2);

  return Arrays.equals(charArray1, charArray2);

}


public static String reverseString(String str) {

  StringBuilder sb = new StringBuilder();

  for (int i = str.length() - 1; i >= 0; i--) {

    sb.append(str.charAt(i));

  }

  return sb.toString();

}


public static int binarySearch(int[] arr, int target) {

  int left = 0;

  int right = arr.length - 1;

  while (left <= right) {

    int mid = left + (right - left) / 2;

    if (arr[mid] == target) {

      return mid;

    } else if (arr[mid] < target) {

      left = mid + 1;

    } else {

      right = mid - 1;

    }

  }

  return -1;

}


public static int partition(int[] arr, int low, int high) {

  int pivot = arr[high];

  int i = low - 1;

  for (int j = low; j <= high - 1; j++) {

    if (arr[j] <= pivot) {

      i++;

      int temp = arr[i];

      arr[i] = arr[j];

      arr[j] = temp;

    }

  }

  int temp = arr[i + 1];

  arr[i + 1] = arr[high];

  arr[high] = temp;

  return i + 1;

}


public static void quickSort(int[] arr, int low, int high) {

  if (low < high) {

    int pivot = partition(arr, low, high);

    quickSort(arr, low, pivot - 1);

    quickSort(arr, pivot + 1, high);

  }

}


public static void mergeSort(int[] arr, int left, int right) {

  if (left < right) {

    int mid = left + (right - left) / 2;

    mergeSort(arr, left, mid);

    mergeSort(arr, mid + 1, right);

    merge(arr, left, mid, right);

  }

}

public static void merge(int[] arr, int left, int mid, int right) {

  int n1 = mid - left + 1;

  int n2 = right - mid;

  int[] leftArr = new int[n1];

  int[] rightArr = new int[n2];

  System.arraycopy(arr, left, leftArr, 0, n1);

  System.arraycopy(arr, mid + 1, rightArr, 0, n2);

  int i = 0, j = 0, k = left;

  while (i < n1 && j < n2) {

    if (leftArr[i] <= rightArr[j]) {

      arr[k] = leftArr[i];

      i++;

    } else {

      arr[k] = rightArr[j];

      j++;

    }

    k++;

  }

  while (i < n1) {

    arr[k] = leftArr[i];

    i++;

    k++;

  }

  while (j < n2) {

    arr[k] = rightArr[j];

    j++;

    k++;

  }

}


public int[] twoSum(int[] nums, int target) {

        Map<Integer, Integer> map = new HashMap<>();

        for (int i = 0; i < nums.length; i++) {

            int current = nums[i];

            // current + x = target

            int x = target - current;

            if(map.containsKey(x)) {

                return new int[] {map.get(x), i};

            }

            map.put(current, i);

        }

        return null;

    }


private static int returnSmallestNumber(int[] arr) {

        int returnNum = 0;

        int N = arr.length;

        Set<Integer> set = new HashSet<>();

        for (Integer integer : arr) {

            if(integer > 0) {

                set.add(integer);

            }

        }

        for (int i = 1; i <= N + 1; i++) {

            if(!set.contains(i))            

                returnNum = i;

        }

        return returnNum;

    }



public static boolean isSubsequence(String s, String t) {

        // every characters of a string can be presented in the another string

        // should be one direction; position should be consistent

        int i = 0; 

        int j = 0;

        while(i < s.length() && j < t.length()){

           if(s.charAt(i) == t.charAt(j)){

               i++;

               j++;

           } else{

               j++;

           }

        }

        return i == s.length();

        }



public static void permute(String str, int index, StringBuilder sb, Set<String> permutations) {

  if (index == str.length()) {

    permutations.add(sb.toString());

    return;

  }

  for (int i = index; i < str.length(); i++) {

    char ch = str.charAt(i);

    sb.append(ch);

    swap(str, index, i); // Swap characters to create new orderings

    permute(str, index + 1, sb, permutations);

    swap(str, index, i); // Swap back to maintain original string

    sb.deleteCharAt(sb.length() - 1);

  }

}

public static void swap(String str, int i, int j) {

  char[] charArray = str.toCharArray();

  char temp = charArray[i];

  charArray[i] = charArray[j];

  charArray[j] = temp;

  str = new String(charArray);

}



public static int longestCommonSubstring(String str1, String str2) {

  int m = str1.length();

  int n = str2.length();

  int[][] dp = new int[m + 1][n + 1]; // dp table to store lengths of common substrings

  int maxLength = 0;

  for (int i = 1; i <= m; i++) {

    for (int j = 1; j <= n; j++) {

      if (str1.charAt(i - 1) == str2.charAt(j - 1)) {

        dp[i][j] = dp[i - 1][j - 1] + 1;

        maxLength = Math.max(maxLength, dp[i][j]);

      } else {

        dp[i][j] = 0;

      }

    }

  }

  return maxLength;

}
 heart 1

#endregion

